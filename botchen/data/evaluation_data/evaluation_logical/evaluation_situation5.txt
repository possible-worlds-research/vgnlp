>> Loaded models dict_keys(['chat'])


>> Prompt: room.n light-in has-light indoors
>> Response:  <u speaker=HUM>(lamp.n on in-bedroom) 

>> Prompt: room.n light-in has-light indoors
>> Response:  <u speaker=HUM>(lamp.n in-bedroom) 

>> Prompt: room.n light-in has-light indoors
>> Response:  <u speaker=HUM>(lamp.n on) 

>> Prompt: room.n light-in has-light indoors
>> Response:  <u speaker=HUM>(lamp.n on in-bedroom bedroom-has lamp-in) 

>> Prompt: light.n on bedroom-has in-room in-bedroom room-has
>> Response:  <u speaker=HUM>(bedroom.n on-bedroom lamp-in) 

>> Prompt: light.n on bedroom-has in-room in-bedroom room-has
>> Response:  <u speaker=HUM>(lamp.n on in-bedroom) 

>> Prompt: light.n on bedroom-has in-room in-bedroom room-has
>> Response:  <u speaker=HUM>(lamp.n on in-bedroom) 

>> Prompt: light.n on bedroom-has in-room in-bedroom room-has
>> Response:  <u speaker=HUM>(lamp.n on) 

>> Prompt: monitor.n flat white on-bureau dark on-desk off by-bottle
>> Response:  <u speaker=HUM>(desk.n caral_processing_unit-under) 

>> Prompt: monitor.n flat white on-bureau dark on-desk off by-bottle
>> Response:  <u speaker=HUM>(wall.n green) 

>> Prompt: monitor.n flat white on-bureau dark on-desk off by-bottle
>> Response:  <u speaker=HUM>(padddding.n ppase-has) 

>> Prompt: monitor.n flat white on-bureau dark on-desk off by-bottle
>> Response:  <u speaker=HUM>(part.n cortar-has) 

>> Prompt: desk.n white tower-under book-on bin-next|to monitor-on bottle-on cluttered computer-on keyboard-on
>> Response:  <u speaker=HUM>(computer.n on-bureau on-bureau) 

>> Prompt: desk.n white tower-under book-on bin-next|to monitor-on bottle-on cluttered computer-on keyboard-on
>> Response:  <u speaker=HUM>(computer.n white on-desk on-desk) 

>> Prompt: desk.n white tower-under book-on bin-next|to monitor-on bottle-on cluttered computer-on keyboard-on
>> Response:  <u speaker=HUM>(computer.n on-bureau) 

>> Prompt: desk.n white tower-under book-on bin-next|to monitor-on bottle-on cluttered computer-on keyboard-on
>> Response:  <u speaker=HUM>(keyboard.n white keyboard-on computer-on) 

>> Prompt: chair.n office gray with-wheel rolling grey
>> Response:  <u speaker=HUM>(light.n on in-bedroom lamp-in) 

>> Prompt: chair.n office gray with-wheel rolling grey
>> Response:  <u speaker=HUM>(light.n light|a lamp-in) 

>> Prompt: chair.n office gray with-wheel rolling grey
>> Response:  <u speaker=HUM>(light.n wate ) 

>> Prompt: chair.n office gray with-wheel rolling grey
>> Response:  <u speaker=HUM>(hair.n drick with-food) 

>> Prompt: bottle.n water screen-by monitor-by on-bureau on-desk plastic empty
>> Response:  <u speaker=HUM>(padd.n ) 

>> Prompt: bottle.n water screen-by monitor-by on-bureau on-desk plastic empty
>> Response:  <u speaker=HUM>(wall.n padding pot) 

>> Prompt: bottle.n water screen-by monitor-by on-bureau on-desk plastic empty
>> Response:  <u speaker=HUM>(part.n ) 

>> Prompt: bottle.n water screen-by monitor-by on-bureau on-desk plastic empty
>> Response:  <u speaker=HUM>(wall.n paddding next|to-suisee ppent) 

>> Prompt: window.n open large blind-on
>> Response:  <u speaker=HUM>(window.n ) 

>> Prompt: window.n open large blind-on
>> Response:  <u speaker=HUM>(window.n house-on) 

>> Prompt: window.n open large blind-on
>> Response:  <u speaker=HUM>(window.n ) 

>> Prompt: window.n open large blind-on
>> Response:  <u speaker=HUM>(paper.n ) 

>> Prompt: outside.n 
>> Response:  <u speaker=HUM>(bag.n black) 

>> Prompt: outside.n 
>> Response:  <u speaker=HUM>(coard.n ) 

>> Prompt: outside.n 
>> Response:  <u speaker=HUM>(calack.n black) 

>> Prompt: outside.n 
>> Response:  <u speaker=HUM>(bin.n black on-table on-table for-computer for-computer for-bureau on-computer computer-computer computer-on computer-of edge-of) 

>> Prompt: blind.n drawn on-window
>> Response:  <u speaker=HUM>(bin.n black on-table with-food) 

>> Prompt: blind.n drawn on-window
>> Response:  <u speaker=HUM>(window.n house-of) 

>> Prompt: blind.n drawn on-window
>> Response:  <u speaker=HUM>(window.n ) 

>> Prompt: blind.n drawn on-window
>> Response:  <u speaker=HUM>(window.n house-on) 

>> Prompt: computer.n on-bureau grey on-desk laptop
>> Response:  <u speaker=HUM>(desk.n cal_processing_unit-under) 

>> Prompt: computer.n on-bureau grey on-desk laptop
>> Response:  <u speaker=HUM>(bureau.n pastered) 

>> Prompt: computer.n on-bureau grey on-desk laptop
>> Response:  <u speaker=HUM>(bureau.n cotrtion chair-on) 

>> Prompt: computer.n on-bureau grey on-desk laptop
>> Response:  <u speaker=HUM>(desk.n choctrtrocessing_ptop grey rdrick-has) 

>> Prompt: poster.n on-wall
>> Response:  <u speaker=HUM>(page.n ) 

>> Prompt: poster.n on-wall
>> Response:  <u speaker=HUM>(wall.n paster-on) 

>> Prompt: poster.n on-wall
>> Response:  <u speaker=HUM>(wall.n partered) 

>> Prompt: poster.n on-wall
>> Response:  <u speaker=HUM>(wall.n green poster-on lastick-on edge-of edge-of) 

>> Prompt: wall.n ledge-against shelf-against poster-on green
>> Response:  <u speaker=HUM>(wall.n pastered ptop-on edge-of edge-of edge-of edge-of edge-of edge-of edge-of) 

>> Prompt: wall.n ledge-against shelf-against poster-on green
>> Response:  <u speaker=HUM>(wall.n partered part on-ster-st on-wall) 

>> Prompt: wall.n ledge-against shelf-against poster-on green
>> Response:  <u speaker=HUM>(lace.n black on-bureau) 

>> Prompt: wall.n ledge-against shelf-against poster-on green
>> Response:  <u speaker=HUM>(lace.n black on) 

>> Prompt: bin.n next|to-bureau blue next|to-desk on-floor
>> Response:  <u speaker=HUM>(desk.n colartirt with-food with) 

>> Prompt: bin.n next|to-bureau blue next|to-desk on-floor
>> Response:  <u speaker=HUM>(part.n paroptop-on lamp-on laptop-on lamp-on lamp-on lamp-on laptop-on) 

>> Prompt: bin.n next|to-bureau blue next|to-desk on-floor
>> Response:  <u speaker=HUM>(desk.n carock-on girl-with) 

>> Prompt: bin.n next|to-bureau blue next|to-desk on-floor
>> Response:  <u speaker=HUM>(desk.n cal_prococessing_unit-under) 

>> Prompt: ceiling.n white
>> Response:  <u speaker=HUM>(desk.n cal_prtrococessing_unit-with) 

>> Prompt: ceiling.n white
>> Response:  <u speaker=HUM>(couct.n ) 

>> Prompt: ceiling.n white
>> Response:  <u speaker=HUM>(chal.n ceatched draware ) 

>> Prompt: ceiling.n white
>> Response:  <u speaker=HUM>(wall.n green partion-on baby-desk on-desk on-desk) 

>> Prompt: shelf.n against-wall book-on hold-book baby-on tube-on brown wooden
>> Response:  <u speaker=HUM>(edge.n of-image) 

>> Prompt: shelf.n against-wall book-on hold-book baby-on tube-on brown wooden
>> Response:  <u speaker=HUM>(lap.n ptop grey on-floor on-floor) 

>> Prompt: shelf.n against-wall book-on hold-book baby-on tube-on brown wooden
>> Response:  <u speaker=HUM>(lap.n white) 

>> Prompt: shelf.n against-wall book-on hold-book baby-on tube-on brown wooden
>> Response:  <u speaker=HUM>(lap.n ptop-on lart) 

>> Prompt: book.n on-shelf shelf-hold on-bureau on-ledge on-desk with-paper red ledge-hold
>> Response:  <u speaker=HUM>(computer.n book-on) 

>> Prompt: book.n on-shelf shelf-hold on-bureau on-ledge on-desk with-paper red ledge-hold
>> Response:  <u speaker=HUM>(edge.n of-wall) 

>> Prompt: book.n on-shelf shelf-hold on-bureau on-ledge on-desk with-paper red ledge-hold
>> Response:  <u speaker=HUM>(edge.n of-image) 

>> Prompt: book.n on-shelf shelf-hold on-bureau on-ledge on-desk with-paper red ledge-hold
>> Response:  <u speaker=HUM>(edge.n of-wall) 

>> Prompt: keyboard.n on-bureau on-desk black
>> Response:  <u speaker=HUM>(desk.n coltrtion chair-on) 

>> Prompt: keyboard.n on-bureau on-desk black
>> Response:  <u speaker=HUM>(desk.n caral_processing_unit-under) 

>> Prompt: keyboard.n on-bureau on-desk black
>> Response:  <u speaker=HUM>(bureau.n cotrtered pastick-on) 

>> Prompt: keyboard.n on-bureau on-desk black
>> Response:  <u speaker=HUM>(desk.n man-sitting|at|a man-sitting|at|a) 

>> Prompt: floor.n bin-on tower-on clean cable-on grey
>> Response:  <u speaker=HUM>(cable.n on-floor) 

>> Prompt: floor.n bin-on tower-on clean cable-on grey
>> Response:  <u speaker=HUM>(cable.n on-floor) 

>> Prompt: floor.n bin-on tower-on clean cable-on grey
>> Response:  <u speaker=HUM>(cable.n on-floor) 

>> Prompt: floor.n bin-on tower-on clean cable-on grey
>> Response:  <u speaker=HUM>(cable.n on-floor on-floor) 

>> Prompt: baby.n on-shelf on-ledge
>> Response:  <u speaker=HUM>(edge.n on-wall) 

>> Prompt: baby.n on-shelf on-ledge
>> Response:  <u speaker=HUM>(wall.n image-on edge-of) 

>> Prompt: baby.n on-shelf on-ledge
>> Response:  <u speaker=HUM>(edge.n of-wall) 

>> Prompt: baby.n on-shelf on-ledge
>> Response:  <u speaker=HUM>(edge.n of-image) 

>> Prompt: tower.n under-bureau white under-desk on-floor
>> Response:  <u speaker=HUM>(desk.n caral_processing_ptop grey roling rdressing_unit-under) 

>> Prompt: tower.n under-bureau white under-desk on-floor
>> Response:  <u speaker=HUM>(desk.n carocentrtrocked|on) 

>> Prompt: tower.n under-bureau white under-desk on-floor
>> Response:  <u speaker=HUM>(desk.n girl-sitting|at|at|a) 

>> Prompt: tower.n under-bureau white under-desk on-floor
>> Response:  <u speaker=HUM>(floor.n cable-on tower-on cable-on) 

>> Prompt: cable.n white on-floor
>> Response:  <u speaker=HUM>(floor.n floor-on cable-on) 

>> Prompt: cable.n white on-floor
>> Response:  <u speaker=HUM>(floor.n cable-on cable-on cable-on) 

>> Prompt: cable.n white on-floor
>> Response:  <u speaker=HUM>(floor.n cable-on) 

>> Prompt: cable.n white on-floor
>> Response:  <u speaker=HUM>(floor.n cable-on cable-on edge-on cable-on) 

>> Prompt: building.n white large
>> Response:  <u speaker=HUM>(suse.n black) 

>> Prompt: building.n white large
>> Response:  <u speaker=HUM>(hair.n with-liquide) 

>> Prompt: building.n white large
>> Response:  <u speaker=HUM>(hair.n with-food) 

>> Prompt: building.n white large
>> Response:  <u speaker=HUM>(hair.n waprt-has) 

>> Prompt: paper.n book-with
>> Response:  <u speaker=HUM>(bord.n on-table) 

>> Prompt: paper.n book-with
>> Response:  <u speaker=HUM>(lap.n ptop-on) 

>> Prompt: paper.n book-with
>> Response:  <u speaker=HUM>(lacel.n black) 

>> Prompt: paper.n book-with
>> Response:  <u speaker=HUM>(bag.n ) 

>> Prompt: wheel.n chair-with
>> Response:  <u speaker=HUM>(lamp.n on in-bedroom) 

>> Prompt: wheel.n chair-with
>> Response:  <u speaker=HUM>(light.n on) 

>> Prompt: wheel.n chair-with
>> Response:  <u speaker=HUM>(lamp.n on in|me fdeed ffeeding in-park has-head has-head has-head has-ear has-ear has-head has-ear eating-pasture eating-pasture has-pasture has- 

>> Prompt: wheel.n chair-with
>> Response:  <u speaker=HUM>(light.n colar-in) 

>> Prompt: tube.n on-shelf white on-ledge
>> Response:  <u speaker=HUM>(ledge.n of-image) 

>> Prompt: tube.n on-shelf white on-ledge
>> Response:  <u speaker=HUM>(ledge.n of-wall) 

>> Prompt: tube.n on-shelf white on-ledge
>> Response:  <u speaker=HUM>(ledge.n of-image) 

>> Prompt: tube.n on-shelf white on-ledge
>> Response:  <u speaker=HUM>(lap.n green pote light-in) 

>> Prompt: bedroom.n has-lamp light-in lamp-in has-light indoors
>> Response:  <u speaker=HUM>(light.n light-in) 

>> Prompt: bedroom.n has-lamp light-in lamp-in has-light indoors
>> Response:  <u speaker=HUM>(lamp.n on in-bedroom bedroom-has lamp-in bedroom-in lamp-in) 

>> Prompt: bedroom.n has-lamp light-in lamp-in has-light indoors
>> Response:  <u speaker=HUM>(lamp.n on in-bedroom) 

>> Prompt: bedroom.n has-lamp light-in lamp-in has-light indoors
>> Response:  <u speaker=HUM>(lamp.n on on in-bedroom bedroom-in) 

>> Prompt: lamp.n on bedroom-has in-bedroom
>> Response:  <u speaker=HUM>(bedroom.n in-bedroom) 

>> Prompt: lamp.n on bedroom-has in-bedroom
>> Response:  <u speaker=HUM>(bedroom.n in-bedroom) 

>> Prompt: lamp.n on bedroom-has in-bedroom
>> Response:  <u speaker=HUM>(lamp.n on) 

>> Prompt: lamp.n on bedroom-has in-bedroom
>> Response:  <u speaker=HUM>(bedroom.n in-bedroom bedroom-has) 

>> Prompt: roof.n white
>> Response:  <u speaker=HUM>(bedroom.n by-by by-sidewalk) 

>> Prompt: roof.n white
>> Response:  <u speaker=HUM>(coadr.n ) 

>> Prompt: roof.n white
>> Response:  <u speaker=HUM>(choad.n ) 

>> Prompt: roof.n white
>> Response:  <u speaker=HUM>(wall.n ) 

>> Prompt: bureau.n white tower-under screen-on book-on bin-next|to container-on monitor-on bottle-on cluttered computer-on keyboard-on
>> Response:  <u speaker=HUM>(computer.n on-desk) 

>> Prompt: bureau.n white tower-under screen-on book-on bin-next|to container-on monitor-on bottle-on cluttered computer-on keyboard-on
>> Response:  <u speaker=HUM>(computer.n on-desk on-desk) 

>> Prompt: bureau.n white tower-under screen-on book-on bin-next|to container-on monitor-on bottle-on cluttered computer-on keyboard-on
>> Response:  <u speaker=HUM>(computer.n on-bureau on-bureau on-desk keyboard-on) 

>> Prompt: bureau.n white tower-under screen-on book-on bin-next|to container-on monitor-on bottle-on cluttered computer-on keyboard-on
>> Response:  <u speaker=HUM>(keyboard.n white clarnt) 

>> Prompt: ledge.n against-wall book-on baby-on hold-book tube-on brown wooden
>> Response:  <u speaker=HUM>(lap.n white) 

>> Prompt: ledge.n against-wall book-on baby-on hold-book tube-on brown wooden
>> Response:  <u speaker=HUM>(lue.n part) 

>> Prompt: ledge.n against-wall book-on baby-on hold-book tube-on brown wooden
>> Response:  <u speaker=HUM>(lap.n ptop grey on-floor) 

>> Prompt: ledge.n against-wall book-on baby-on hold-book tube-on brown wooden
>> Response:  <u speaker=HUM>(edge.n of-image) 

>> Prompt: screen.n flat white by-container on-bureau dark off by-bottle
>> Response:  <u speaker=HUM>(chin.n bottle-in) 

>> Prompt: screen.n flat white by-container on-bureau dark off by-bottle
>> Response:  <u speaker=HUM>(pardding.n red) 

>> Prompt: screen.n flat white by-container on-bureau dark off by-bottle
>> Response:  <u speaker=HUM>(couch.n paddr-has) 

>> Prompt: screen.n flat white by-container on-bureau dark off by-bottle
>> Response:  <u speaker=HUM>(part.n red) 

>> Prompt: container.n screen-by water on-bureau plastic empty
>> Response:  <u speaker=HUM>(pardd.n ) 

>> Prompt: container.n screen-by water on-bureau plastic empty
>> Response:  <u speaker=HUM>(pot.n on-wall potograph-wall) 

>> Prompt: container.n screen-by water on-bureau plastic empty
>> Response:  <u speaker=HUM>(wall.n postograph-on ptop-on edge-of) 

>> Prompt: container.n screen-by water on-bureau plastic empty
>> Response:  <u speaker=HUM>(part.n ) 
